// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/analizadores/Lexer.jflex

// ------------  Paquetes e importaciones ------------
package analizadores; 
import clases.Erroor;
import clases.Token;
import func.Funcion;
import static func.Funcion.TokenList;
import static func.Funcion.ErrorList;


import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\1\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\34\1\41"+
    "\1\42\1\43\1\44\1\45\1\34\1\46\1\47\1\50"+
    "\1\51\1\52\4\34\1\53\1\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\64\1\71\1\72\1\73\1\74"+
    "\1\75\1\64\1\76\1\77\1\100\1\101\1\102\4\64"+
    "\1\103\1\104\1\105\7\0\1\3\113\0\1\34\37\0"+
    "\1\34\76\0\2\106\115\0\1\107\u01a8\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\15\1\1\23\1\24"+
    "\1\25\16\26\1\27\1\1\1\30\1\31\1\0\1\32"+
    "\1\33\2\0\1\34\1\0\1\35\1\36\1\37\15\0"+
    "\1\40\1\0\1\41\15\26\1\40\1\26\1\42\1\43"+
    "\1\0\1\44\22\0\22\26\1\45\15\0\1\46\2\0"+
    "\1\47\1\50\15\26\1\46\2\26\1\47\1\50\6\0"+
    "\1\51\2\0\1\52\5\0\6\26\1\51\2\26\1\52"+
    "\5\26\2\0\1\53\2\0\1\54\1\0\1\55\5\0"+
    "\2\26\1\53\2\26\1\54\1\26\1\55\5\26\1\56"+
    "\1\57\7\0\1\60\1\56\1\57\7\26\1\60\1\61"+
    "\1\0\1\62\1\63\1\64\1\65\1\66\1\61\1\26"+
    "\1\62\1\63\1\64\1\65\1\66\2\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\110\0\220\0\330\0\110\0\u0120\0\u0168"+
    "\0\110\0\110\0\110\0\110\0\110\0\110\0\110\0\u01b0"+
    "\0\u01f8\0\110\0\110\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360"+
    "\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0"+
    "\0\u05e8\0\u0630\0\u0678\0\u06c0\0\110\0\110\0\u0708\0\u0750"+
    "\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990"+
    "\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\110\0\u0af8\0\110\0\110"+
    "\0\330\0\110\0\110\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\110"+
    "\0\110\0\110\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8"+
    "\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008"+
    "\0\u1050\0\110\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440"+
    "\0\u1488\0\110\0\110\0\u14d0\0\u0c18\0\u1518\0\u1560\0\u15a8"+
    "\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8"+
    "\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28"+
    "\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68"+
    "\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8"+
    "\0\u1ef0\0\110\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0"+
    "\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\110"+
    "\0\u22e0\0\u2328\0\110\0\110\0\u2370\0\u23b8\0\u2400\0\u2448"+
    "\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688"+
    "\0\u26d0\0\u0870\0\u2718\0\u2760\0\u0870\0\u0870\0\u27a8\0\u27f0"+
    "\0\u2838\0\u2880\0\u28c8\0\u2910\0\110\0\u2958\0\u29a0\0\110"+
    "\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0"+
    "\0\u2c28\0\u2c70\0\u2cb8\0\u0870\0\u2d00\0\u2d48\0\u0870\0\u2d90"+
    "\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\110\0\u2f88"+
    "\0\u2fd0\0\110\0\u3018\0\110\0\u3060\0\u30a8\0\u30f0\0\u3138"+
    "\0\u3180\0\u31c8\0\u3210\0\u0870\0\u3258\0\u32a0\0\u0870\0\u32e8"+
    "\0\u0870\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\110\0\110"+
    "\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\110"+
    "\0\u0870\0\u0870\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8"+
    "\0\u3840\0\u0870\0\110\0\u3888\0\110\0\110\0\110\0\110"+
    "\0\110\0\u0870\0\u38d0\0\u0870\0\u0870\0\u0870\0\u0870\0\u0870"+
    "\0\110\0\u0870";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\2\1\34\1\35\1\2\1\36"+
    "\1\37\2\2\1\40\1\41\1\42\2\2\1\43\1\44"+
    "\1\45\1\46\1\2\1\47\1\50\1\51\1\52\1\53"+
    "\2\54\1\55\1\56\1\54\1\57\1\60\2\54\1\61"+
    "\1\62\1\63\2\54\1\64\1\65\1\66\1\67\1\35"+
    "\1\42\135\0\1\70\62\0\2\71\1\0\2\71\1\72"+
    "\102\71\7\0\1\73\127\0\24\74\4\0\24\74\20\0"+
    "\1\75\4\0\1\76\106\0\1\77\1\0\1\21\113\0"+
    "\1\100\107\0\1\101\107\0\1\102\113\0\1\103\27\0"+
    "\1\103\65\0\1\104\27\0\1\104\16\0\1\104\30\0"+
    "\1\105\14\0\1\106\12\0\1\105\14\0\1\106\57\0"+
    "\1\107\27\0\1\107\53\0\1\110\2\0\1\111\24\0"+
    "\1\110\2\0\1\111\43\0\1\112\27\0\1\112\72\0"+
    "\1\113\27\0\1\113\61\0\1\114\27\0\1\114\52\0"+
    "\1\115\27\0\1\115\16\0\1\115\30\0\1\116\27\0"+
    "\1\116\63\0\1\117\27\0\1\117\63\0\1\120\27\0"+
    "\1\120\16\0\1\120\45\0\1\121\27\0\1\121\67\0"+
    "\1\122\54\0\1\54\7\0\1\103\24\0\3\54\1\123"+
    "\21\54\26\0\1\54\15\0\1\104\16\0\11\54\1\124"+
    "\13\54\3\0\1\104\22\0\1\54\5\0\1\105\14\0"+
    "\1\106\11\0\1\54\1\125\14\54\1\126\6\54\26\0"+
    "\1\54\22\0\1\107\11\0\16\54\1\127\6\54\26\0"+
    "\1\54\16\0\1\110\2\0\1\111\12\0\12\54\1\130"+
    "\2\54\1\131\7\54\26\0\1\54\34\0\25\54\26\0"+
    "\1\54\5\0\1\112\26\0\1\54\1\132\23\54\26\0"+
    "\1\54\20\0\1\113\13\0\14\54\1\133\10\54\26\0"+
    "\1\54\22\0\1\114\11\0\16\54\1\134\6\54\26\0"+
    "\1\54\15\0\1\115\16\0\11\54\1\135\13\54\3\0"+
    "\1\115\22\0\1\54\5\0\1\116\26\0\1\54\1\136"+
    "\23\54\26\0\1\54\11\0\1\117\22\0\5\54\1\137"+
    "\17\54\26\0\1\54\15\0\1\120\16\0\11\54\1\140"+
    "\13\54\3\0\1\120\22\0\1\54\22\0\1\121\11\0"+
    "\16\54\1\141\6\54\111\0\1\142\13\0\1\143\77\0"+
    "\13\75\1\144\74\75\2\76\1\0\105\76\21\0\1\145"+
    "\115\0\1\146\27\0\1\146\73\0\1\147\27\0\1\147"+
    "\46\0\1\150\13\0\1\151\13\0\1\150\13\0\1\151"+
    "\54\0\1\152\2\0\1\153\24\0\1\152\2\0\1\153"+
    "\41\0\1\154\27\0\1\154\62\0\1\155\27\0\1\155"+
    "\74\0\1\156\27\0\1\156\40\0\1\157\27\0\1\157"+
    "\73\0\1\160\27\0\1\160\55\0\1\161\27\0\1\161"+
    "\47\0\1\162\27\0\1\162\72\0\1\163\27\0\1\163"+
    "\43\0\1\164\15\0\1\165\11\0\1\164\15\0\1\165"+
    "\52\0\1\166\27\0\1\166\53\0\1\167\27\0\1\167"+
    "\16\0\1\167\22\0\1\54\5\0\1\146\26\0\1\54"+
    "\1\170\23\54\26\0\1\54\21\0\1\147\12\0\15\54"+
    "\1\171\7\54\26\0\1\54\10\0\1\150\13\0\1\151"+
    "\7\0\4\54\1\172\13\54\1\173\4\54\26\0\1\54"+
    "\21\0\1\152\2\0\1\153\7\0\15\54\1\174\2\54"+
    "\1\175\4\54\26\0\1\54\6\0\1\154\25\0\2\54"+
    "\1\176\22\54\26\0\1\54\11\0\1\155\22\0\5\54"+
    "\1\177\17\54\26\0\1\54\26\0\1\156\5\0\22\54"+
    "\1\200\2\54\26\0\1\54\7\0\1\157\24\0\3\54"+
    "\1\201\21\54\26\0\1\54\23\0\1\160\10\0\17\54"+
    "\1\202\5\54\26\0\1\54\21\0\1\161\12\0\15\54"+
    "\1\203\7\54\26\0\1\54\11\0\1\162\22\0\5\54"+
    "\1\204\17\54\26\0\1\54\24\0\1\163\7\0\20\54"+
    "\1\205\4\54\26\0\1\54\10\0\1\164\15\0\1\165"+
    "\5\0\4\54\1\206\15\54\1\207\2\54\26\0\1\54"+
    "\21\0\1\166\12\0\15\54\1\210\7\54\26\0\1\54"+
    "\15\0\1\167\16\0\11\54\1\211\13\54\3\0\1\167"+
    "\1\0\13\75\1\144\4\75\1\212\67\75\32\0\1\213"+
    "\27\0\1\213\54\0\1\214\27\0\1\214\63\0\1\215"+
    "\27\0\1\215\53\0\1\216\27\0\1\216\100\0\1\217"+
    "\27\0\1\217\57\0\1\220\27\0\1\220\50\0\1\221"+
    "\27\0\1\221\47\0\1\222\27\0\1\222\61\0\1\223"+
    "\27\0\1\223\57\0\1\224\27\0\1\224\72\0\1\225"+
    "\27\0\1\225\46\0\1\226\27\0\1\226\65\0\1\227"+
    "\27\0\1\227\43\0\1\230\27\0\1\230\74\0\1\231"+
    "\27\0\1\231\57\0\1\232\27\0\1\232\57\0\1\233"+
    "\27\0\1\233\45\0\1\234\27\0\1\234\46\0\1\54"+
    "\10\0\1\213\23\0\4\54\1\235\20\54\26\0\1\54"+
    "\5\0\1\214\26\0\1\54\1\236\23\54\26\0\1\54"+
    "\11\0\1\215\22\0\5\54\1\237\17\54\26\0\1\54"+
    "\5\0\1\216\26\0\1\54\1\240\23\54\26\0\1\54"+
    "\26\0\1\217\5\0\22\54\1\241\2\54\26\0\1\54"+
    "\26\0\1\220\5\0\22\54\1\242\2\54\26\0\1\54"+
    "\17\0\1\221\14\0\13\54\1\243\11\54\26\0\1\54"+
    "\7\0\1\222\24\0\3\54\1\244\21\54\26\0\1\54"+
    "\11\0\1\223\22\0\5\54\1\245\17\54\26\0\1\54"+
    "\11\0\1\224\22\0\5\54\1\246\17\54\26\0\1\54"+
    "\24\0\1\225\7\0\20\54\1\247\4\54\26\0\1\54"+
    "\13\0\1\226\20\0\7\54\1\250\15\54\26\0\1\54"+
    "\21\0\1\227\12\0\15\54\1\251\7\54\26\0\1\54"+
    "\5\0\1\230\26\0\1\54\1\252\23\54\26\0\1\54"+
    "\22\0\1\231\11\0\16\54\1\253\6\54\26\0\1\54"+
    "\22\0\1\232\11\0\16\54\1\254\6\54\26\0\1\54"+
    "\22\0\1\233\11\0\16\54\1\255\6\54\26\0\1\54"+
    "\10\0\1\234\23\0\4\54\1\256\20\54\40\0\1\257"+
    "\27\0\1\257\72\0\1\260\27\0\1\260\54\0\1\261"+
    "\27\0\1\261\45\0\1\262\27\0\1\262\65\0\1\263"+
    "\27\0\1\263\16\0\1\263\30\0\1\264\27\0\1\264"+
    "\63\0\1\265\27\0\1\265\75\0\1\266\27\0\1\266"+
    "\54\0\1\267\27\0\1\267\57\0\1\270\27\0\1\270"+
    "\50\0\1\271\27\0\1\271\16\0\1\271\40\0\1\272"+
    "\27\0\1\272\16\0\1\272\51\0\1\273\27\0\1\273"+
    "\52\0\1\274\27\0\1\274\62\0\1\275\27\0\1\275"+
    "\32\0\1\54\11\0\1\257\22\0\5\54\1\276\17\54"+
    "\26\0\1\54\24\0\1\260\7\0\20\54\1\277\4\54"+
    "\26\0\1\54\21\0\1\261\12\0\15\54\1\300\7\54"+
    "\26\0\1\54\7\0\1\262\24\0\3\54\1\301\21\54"+
    "\26\0\1\54\15\0\1\263\16\0\11\54\1\302\13\54"+
    "\3\0\1\263\22\0\1\54\5\0\1\264\26\0\1\54"+
    "\1\303\23\54\26\0\1\54\11\0\1\265\22\0\5\54"+
    "\1\304\17\54\26\0\1\54\27\0\1\266\4\0\23\54"+
    "\1\305\1\54\26\0\1\54\24\0\1\267\7\0\20\54"+
    "\1\306\4\54\26\0\1\54\24\0\1\270\7\0\20\54"+
    "\1\307\4\54\26\0\1\54\15\0\1\271\16\0\11\54"+
    "\1\310\13\54\3\0\1\271\22\0\1\54\15\0\1\272"+
    "\16\0\11\54\1\311\13\54\3\0\1\272\22\0\1\54"+
    "\26\0\1\273\5\0\22\54\1\312\2\54\26\0\1\54"+
    "\21\0\1\274\12\0\15\54\1\313\7\54\26\0\1\54"+
    "\24\0\1\275\7\0\20\54\1\314\4\54\50\0\1\315"+
    "\27\0\1\315\53\0\1\316\27\0\1\316\16\0\1\316"+
    "\30\0\1\317\27\0\1\317\100\0\1\320\27\0\1\320"+
    "\52\0\1\321\27\0\1\321\62\0\1\322\27\0\1\322"+
    "\61\0\1\323\27\0\1\323\53\0\1\324\27\0\1\324"+
    "\55\0\1\325\27\0\1\325\65\0\1\326\27\0\1\326"+
    "\55\0\1\327\27\0\1\327\43\0\1\330\27\0\1\330"+
    "\70\0\1\331\27\0\1\331\35\0\1\54\21\0\1\315"+
    "\12\0\15\54\1\332\7\54\26\0\1\54\15\0\1\316"+
    "\16\0\11\54\1\333\13\54\3\0\1\316\22\0\1\54"+
    "\5\0\1\317\26\0\1\54\1\334\23\54\26\0\1\54"+
    "\26\0\1\320\5\0\22\54\1\335\2\54\26\0\1\54"+
    "\21\0\1\321\12\0\15\54\1\336\7\54\26\0\1\54"+
    "\24\0\1\322\7\0\20\54\1\337\4\54\26\0\1\54"+
    "\26\0\1\323\5\0\22\54\1\340\2\54\26\0\1\54"+
    "\22\0\1\324\11\0\16\54\1\341\6\54\26\0\1\54"+
    "\20\0\1\325\13\0\14\54\1\342\10\54\26\0\1\54"+
    "\26\0\1\326\5\0\22\54\1\343\2\54\26\0\1\54"+
    "\24\0\1\327\7\0\20\54\1\344\4\54\26\0\1\54"+
    "\10\0\1\330\23\0\4\54\1\345\20\54\26\0\1\54"+
    "\21\0\1\331\12\0\15\54\1\346\7\54\34\0\1\347"+
    "\27\0\1\347\74\0\1\350\27\0\1\350\46\0\1\351"+
    "\27\0\1\351\75\0\1\352\27\0\1\352\35\0\1\353"+
    "\27\0\1\353\67\0\1\354\27\0\1\354\16\0\1\354"+
    "\52\0\1\355\27\0\1\355\35\0\1\356\27\0\1\356"+
    "\63\0\1\357\27\0\1\357\70\0\1\360\27\0\1\360"+
    "\34\0\1\54\5\0\1\347\26\0\1\54\1\361\23\54"+
    "\26\0\1\54\22\0\1\350\11\0\16\54\1\362\6\54"+
    "\26\0\1\54\11\0\1\351\22\0\5\54\1\363\17\54"+
    "\26\0\1\54\27\0\1\352\4\0\23\54\1\364\1\54"+
    "\26\0\1\54\5\0\1\353\26\0\1\54\1\365\23\54"+
    "\26\0\1\54\15\0\1\354\16\0\11\54\1\366\13\54"+
    "\3\0\1\354\22\0\1\54\27\0\1\355\4\0\23\54"+
    "\1\367\1\54\26\0\1\54\5\0\1\356\26\0\1\54"+
    "\1\370\23\54\26\0\1\54\11\0\1\357\22\0\5\54"+
    "\1\371\17\54\26\0\1\54\22\0\1\360\11\0\16\54"+
    "\1\372\6\54\53\0\1\373\27\0\1\373\40\0\1\374"+
    "\27\0\1\374\76\0\1\375\27\0\1\375\57\0\1\376"+
    "\27\0\1\376\43\0\1\377\27\0\1\377\74\0\1\u0100"+
    "\27\0\1\u0100\7\0\1\u0100\44\0\1\u0101\27\0\1\u0101"+
    "\34\0\1\54\24\0\1\373\7\0\20\54\1\u0102\4\54"+
    "\26\0\1\54\5\0\1\374\26\0\1\54\1\u0103\23\54"+
    "\26\0\1\54\24\0\1\375\7\0\20\54\1\u0104\4\54"+
    "\26\0\1\54\24\0\1\376\7\0\20\54\1\u0105\4\54"+
    "\26\0\1\54\10\0\1\377\23\0\4\54\1\u0106\20\54"+
    "\26\0\1\54\25\0\1\u0100\6\0\21\54\1\u0107\3\54"+
    "\4\0\1\u0100\21\0\1\54\22\0\1\u0101\11\0\16\54"+
    "\1\u0108\6\54\53\0\1\u0109\27\0\1\u0109\32\0\1\54"+
    "\24\0\1\u0109\7\0\20\54\1\u010a\4\54\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14616];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\2\1\7\11\2\1\2\11"+
    "\21\1\2\11\16\1\1\11\1\1\2\11\1\0\2\11"+
    "\2\0\1\1\1\0\3\11\15\0\1\1\1\0\1\11"+
    "\17\1\2\11\1\0\1\1\22\0\22\1\1\11\15\0"+
    "\1\11\2\0\2\11\22\1\6\0\1\11\2\0\1\11"+
    "\5\0\17\1\2\0\1\11\2\0\1\11\1\0\1\11"+
    "\5\0\15\1\2\11\7\0\1\11\12\1\1\11\1\0"+
    "\5\11\7\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline = 1;
    yycolumn =1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { Erroor errorsito = new Erroor("Lexico", yytext() ,"No es válido en este lenguaje", yyline, yycolumn);Funcion.ErrorList.add(errorsito);System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn);
            }
          // fall through
          case 56: break;
          case 2:
            { /* Espacios en blanco se ignoran */
            }
          // fall through
          case 57: break;
          case 3:
            { Token NuevoToken = new Token("TkSimINOT",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimINOT> Tk: " + yytext());return new Symbol(sym.TkSimINOT, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 4:
            { Token NuevoToken = new Token("TkSimMODULO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimMODULO> Tk: " + yytext());return new Symbol(sym.TkSimMODULO, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 5:
            { Token NuevoToken = new Token("TkSimPARENTESISAbre",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimPARENTESISAbre> Tk: " + yytext());return new Symbol(sym.TkSimPARENTESISAbre, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 6:
            { Token NuevoToken = new Token("TkSimPARENTESISCierra",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimPARENTESISCierra> Tk: " + yytext());return new Symbol(sym.TkSimPARENTESISCierra, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 7:
            { Token NuevoToken = new Token("TkSimMULTIPLICACION",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimMULTIPLICACION> Tk: " + yytext());return new Symbol(sym.TkSimMULTIPLICACION, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 8:
            { Token NuevoToken = new Token("TkSimMAS",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimMAS> Tk: " + yytext());return new Symbol(sym.TkSimMAS, yycolumn, yyline, yytext());
            }
          // fall through
          case 63: break;
          case 9:
            { Token NuevoToken = new Token("TkSimCOMA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimPUNTO> Tk: " + yytext());return new Symbol(sym.TkSimPUNTO, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 10:
            { Token NuevoToken = new Token("TkSimRESTA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimRESTA> Tk: " + yytext());return new Symbol(sym.TkSimRESTA, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 11:
            { Token NuevoToken = new Token("TkSimPUNTO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimPUNTO> Tk: " + yytext());return new Symbol(sym.TkSimPUNTO, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 12:
            { Token NuevoToken = new Token("TkSimDIVISION",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimDIVISION> Tk: " + yytext());return new Symbol(sym.TkSimDIVISION, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 13:
            { Token NuevoToken = new Token("TkJENTERO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkJENTERO> Tk: " + yytext());return new Symbol(sym.TkJENTERO, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 14:
            { Token NuevoToken = new Token("TkSimDOSPUNTOS",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimDOSPUNTOS> Tk: " + yytext());return new Symbol(sym.TkSimDOSPUNTOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 15:
            { Token NuevoToken = new Token("TkSimPUNTOYCOMA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimPUNTOYCOMA> Tk: " + yytext());return new Symbol(sym.TkSimPUNTOYCOMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 16:
            { Token NuevoToken = new Token("TkSimMENOR",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimMENOR> Tk: " + yytext());return new Symbol(sym.TkSimMENOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 17:
            { Token NuevoToken = new Token("TkSimIGUAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimIGUAL> Tk: " + yytext());return new Symbol(sym.TkSimIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 18:
            { Token NuevoToken = new Token("TkSimMAYOR",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimMAYOR> Tk: " + yytext());return new Symbol(sym.TkSimMAYOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 19:
            { Token NuevoToken = new Token("TkSimCORCHETEAbre",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimCORCHETEAbre> Tk: " + yytext());return new Symbol(sym.TkSimCORCHETEAbre, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 20:
            { Token NuevoToken = new Token("TkSimCORCHETECierra",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimCORCHETECierra> Tk: " + yytext());return new Symbol(sym.TkSimCORCHETECierra, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 21:
            { Token NuevoToken = new Token("TkSimMPOTENCIA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimMPOTENCIA> Tk: " + yytext());return new Symbol(sym.TkSimMPOTENCIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 22:
            { Token NuevoToken = new Token("TkJIdentificador",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkJIdentificador> Tk: " + yytext());return new Symbol(sym.TkJIdentificador, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 23:
            { Token NuevoToken = new Token("TkSimLLAVEAbre",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimLLAVEAbre> Tk: " + yytext());return new Symbol(sym.TkSimLLAVEAbre, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 24:
            { Token NuevoToken = new Token("TkSimLLAVECierra",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimLLAVECierra> Tk: " + yytext());return new Symbol(sym.TkSimLLAVECierra, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 25:
            { Token NuevoToken = new Token("TkSimDIFERENTE",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimDIFERENTE> Tk: " + yytext());return new Symbol(sym.TkSimDIFERENTE, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 26:
            { Token NuevoToken = new Token("TkJCADENA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkJCADENA> Tk: " + yytext());return new Symbol(sym.TkJCADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 27:
            { Token NuevoToken = new Token("TkSimAND",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimAND> Tk: " + yytext());return new Symbol(sym.TkSimAND, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 28:
            { /*se ignoran comentarios de una linea */
            }
          // fall through
          case 83: break;
          case 29:
            { Token NuevoToken = new Token("TkSimMENORIGUAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimMENORIGUAL> Tk: " + yytext());return new Symbol(sym.TkSimMENORIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 30:
            { Token NuevoToken = new Token("TkSimIGUALIGUAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimIGUALIGUAL> Tk: " + yytext());return new Symbol(sym.TkSimIGUALIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 31:
            { Token NuevoToken = new Token("TkSimMAYORIGUAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimMAYORIGUAL> Tk: " + yytext());return new Symbol(sym.TkSimMAYORIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 32:
            { Token NuevoToken = new Token("TkResSI",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResSI> Tk: " + yytext());return new Symbol(sym.TkResSI, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 33:
            { Token NuevoToken = new Token("TkSimCorchetesArreglo",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimCorchetesArreglo> Tk: " + yytext());return new Symbol(sym.TkSimCorchetesArreglo, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 34:
            { Token NuevoToken = new Token("TkSimOR",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSimOR> Tk: " + yytext());return new Symbol(sym.TkSimOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 35:
            { Token NuevoToken = new Token("TkJErChar",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkJErChar> Tk: " + yytext());return new Symbol(sym.TkJErChar, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 36:
            { Token NuevoToken = new Token("TkJDECIMAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkJDECIMAL> Tk: " + yytext());return new Symbol(sym.TkJDECIMAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 37:
            { /*se ignoran comentarios multilinea */
            }
          // fall through
          case 92: break;
          case 38:
            { Token NuevoToken = new Token("TkResPARA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResPARA> Tk: " + yytext());return new Symbol(sym.TkResPARA, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 39:
            { Token NuevoToken = new Token("TkResSINO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResSINO> Tk: " + yytext());return new Symbol(sym.TkResSINO, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 40:
            { Token NuevoToken = new Token("TkResVOID",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResVOID> Tk: " + yytext());return new Symbol(sym.TkResVOID, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 41:
            { Token NuevoToken = new Token("TkResDOBLE",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResDOBLE> Tk: " + yytext());return new Symbol(sym.TkResDOBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 42:
            { Token NuevoToken = new Token("TkResHACER",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResHACER> Tk: " + yytext());return new Symbol(sym.TkResHACER, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 43:
            { Token NuevoToken = new Token("TkResCADENA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResCADENA> Tk: " + yytext());return new Symbol(sym.TkResCADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 44:
            { Token NuevoToken = new Token("TkResCORTAR",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResCORTAR> Tk: " + yytext());return new Symbol(sym.TkResCORTAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 45:
            { Token NuevoToken = new Token("TkResENTERO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResENTERO> Tk: " + yytext());return new Symbol(sym.TkResENTERO, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 46:
            { Token NuevoToken = new Token("TkResACADENA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResACADENA> Tk: " + yytext());return new Symbol(sym.TkResACADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 47:
            { Token NuevoToken = new Token("TkResBINARIO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResBINARIO> Tk: " + yytext());return new Symbol(sym.TkResBINARIO, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          case 48:
            { Token NuevoToken = new Token("TkResRETORNO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResRETORNO> Tk: " + yytext());return new Symbol(sym.TkResRETORNO, yycolumn, yyline, yytext());
            }
          // fall through
          case 103: break;
          case 49:
            { Token NuevoToken = new Token("TkResCARACTER",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResCARACTER> Tk: " + yytext());return new Symbol(sym.TkResCARACTER, yycolumn, yyline, yytext());
            }
          // fall through
          case 104: break;
          case 50:
            { Token NuevoToken = new Token("TkResEJECUTAR",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResEJECUTAR> Tk: " + yytext());return new Symbol(sym.TkResEJECUTAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 105: break;
          case 51:
            { Token NuevoToken = new Token("TkResIMPRIMIR",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResIMPRIMIR> Tk: " + yytext());return new Symbol(sym.TkResIMPRIMIR, yycolumn, yyline, yytext());
            }
          // fall through
          case 106: break;
          case 52:
            { Token NuevoToken = new Token("TkResLONGITUD",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResLONGITUD> Tk: " + yytext());return new Symbol(sym.TkResLONGITUD, yycolumn, yyline, yytext());
            }
          // fall through
          case 107: break;
          case 53:
            { Token NuevoToken = new Token("TkResMIENTRAS",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResMIENTRAS> Tk: " + yytext());return new Symbol(sym.TkResMIENTRAS, yycolumn, yyline, yytext());
            }
          // fall through
          case 108: break;
          case 54:
            { Token NuevoToken = new Token("TkResREDONDEO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResREDONDEO> Tk: " + yytext());return new Symbol(sym.TkResREDONDEO, yycolumn, yyline, yytext());
            }
          // fall through
          case 109: break;
          case 55:
            { Token NuevoToken = new Token("TkResCONTINUAR",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkResCONTINUAR> Tk: " + yytext());return new Symbol(sym.TkResCONTINUAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
