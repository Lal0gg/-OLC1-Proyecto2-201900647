// ------------  Paquetes e importaciones ------------
package analizadores;

import java_cup.runtime.*;
import clases.Erroor;
import func.Funcion;
import java.util.LinkedList; 
import Abstract.*;
import instrucciones.*;
import Expresiones.Primitivos.*;
import Expresiones.Aritmeticas.*;
import Expresiones.Relacional.*;
import Expresiones.Logica.*;
import Expresiones.OperacionUnaria;
import clases.TipoOperacionUnitaria;
import clases.TipoOperacion;
import clases.TipoDato;
import clases.*;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code
{:  
    public void syntax_error(Symbol s) {
    if (s.value != null) {
        Erroor errorsito = new Erroor("Sintactico", s.value.toString(), "No es valido en este lenguaje sintact", s.right, s.left);
        Funcion.ErrorList.add(errorsito);
        System.err.println("Error Sintactico: " + s.value.toString() + "  Fila: " + s.right + "  Columna: " + s.left + ". Recuperado");
    } else {
        // Handle the case where s.value is null (customize this part based on your needs)
        System.err.println("Error Sintactico: Token sin valor asignado  Fila: " + s.right + "  Columna: " + s.left + ". Recuperado");
    }

}

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    if (s.value != null) {
        Erroor errorsito = new Erroor("Sintactico", s.value.toString(), "No es valido en este lenguaje sintact", s.right, s.left);
        Funcion.ErrorList.add(errorsito);
        System.err.println("Error Sintactico: " + s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado");
    } else {
        // Handle the case where s.value is null (customize this part based on your needs)
        System.err.println("Error Sintactico: Token sin valor asignado - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado");
    }
}

 public static TablaSimbolos tablaGlobal = new TablaSimbolos();


     
:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String TkResVOID,TkResENTERO,TkResDOBLE,TkResBINARIO,TkResCARACTER,TkResCADENA;
terminal String TkResSI,TkResSINO,TkResIMPRIMIR,TkResMIENTRAS,TkResPARA,TkResHACER;
terminal String TkResEJECUTAR,TkResCORTAR,TkResCONTINUAR,TkResRETORNO,TkResREDONDEO,TkResLONGITUD,TkResACADENA;
terminal String TkSimMAS,MENOS,TkSimMULTIPLICACION,TkSimDIVISION,TkSimMPOTENCIA,TkSimMODULO;
terminal String TkSimPARENTESISAbre,TkSimPARENTESISCierra,TkSimLLAVEAbre,TkSimLLAVECierra,TkSimCORCHETEAbre,TkSimCORCHETECierra,TkSimCorchetesArreglo;
terminal String TkSimIGUALIGUAL,TkSimDIFERENTE,TkSimMENOR,TkSimMENORIGUAL,TkSimMAYOR,TkSimMAYORIGUAL;
terminal String TkSimOR,TkSimAND,TkSimINOT;
terminal String TkSimPUNTOYCOMA,TkSimDOSPUNTOS,TkSimPUNTO,TkSimCOMA,TkSimIGUAL;
terminal String TkJENTERO,TkJDECIMAL,TkJCADENA,TkJErChar,TkJIdentificador;
terminal String TkResSELECTOR,TkResCASO,TkResTIPODE,TkResTRUE,TkResFALSE,UMENOS,TkSimINCREMENTO,TkSimDECREMENTO;


//------> Declaración de no terminales
non terminal inicio;
non terminal instruccion,lista_instruccion;
non terminal lista_metodos, lista_ejecuciones, metodo,ejecucion;
non terminal instruccionImprimir,instruccionSi,instruccionMientras,instruccionHacerMientras;
non terminal instruccionPara,instruccionSelectorCaso,declaracionVariable,asignacionVariable;
non terminal instruccionCasteo,expresion,expresionRelacional,listaInicio,tipoDatoReservado;
non terminal instrLlaveC,listaIds,tokenId;


//------> PRECEDENCIA
precedence left TkSimOR;
precedence left TkSimAND;
precedence right TkSimINOT;
precedence left TkSimIGUALIGUAL,TkSimDIFERENTE,TkSimMENOR,TkSimMENORIGUAL,TkSimMAYOR,TkSimMAYORIGUAL; 
precedence left TkSimMAS,MENOS;
precedence left TkSimMULTIPLICACION, TkSimDIVISION;
precedence left TkSimMPOTENCIA,TkSimMODULO;
precedence right UMENOS;





// ------------  GRAMATICA  ------------

start with inicio; //Simbolo inicial


inicio ::= lista_metodos
;
lista_metodos ::= lista_metodos metodo
               | metodo
;
metodo ::= TkResVOID TkJIdentificador TkSimPARENTESISAbre TkSimPARENTESISCierra TkSimLLAVEAbre lista_instruccion TkSimLLAVECierra{::}
            | ejecucion
;
ejecucion::= TkResEJECUTAR  TkJIdentificador  TkSimPARENTESISAbre TkSimPARENTESISCierra  TkSimPUNTOYCOMA
;
lista_instruccion ::= lista_instruccion instruccion
                    | instruccion
;

instruccion::=      instruccionImprimir
                |   instruccionSi
                |   instruccionMientras
                |   instruccionHacerMientras
                |   instruccionPara
                |   instruccionSelectorCaso
                |   declaracionVariable
                |   asignacionVariable
                |   instruccionCasteo
                |   error  TkSimPUNTOYCOMA
;
instruccionImprimir::=  TkResIMPRIMIR TkSimPARENTESISAbre expresion:a TkSimPARENTESISCierra  TkSimPUNTOYCOMA    {:
                                                                                                                    RESULT = new instIMPRIMIR((Instruccion)a).Interpretarr();
                                                                                                                 :}
;
expresion ::=     TkJENTERO :a    {:RESULT = new DataPrimitiva(a,TipoDato.ENTERO); :}
                | TkJDECIMAL :a   {:RESULT = new DataPrimitiva(a,TipoDato.DECIMAL);:}
                | TkJErChar :a    {:RESULT = new DataPrimitiva(a,TipoDato.CARACTER); :}
                | TkJCADENA :a    {:RESULT = new DataPrimitiva(a,TipoDato.CADENA);:}
                | TkResTRUE :a    {:RESULT = new DataPrimitiva(a,TipoDato.BOOLEANO);:}
                | TkResFALSE :a   {:RESULT = new DataPrimitiva(a,TipoDato.BOOLEANO);:}
                | TkJIdentificador :a    {: RESULT = new expIDENTIFICADOR(a,tablaGlobal);:}
                | MENOS expresion:b  {: RESULT = new OperacionUnaria((Instruccion)b,TipoOperacionUnitaria.RESTAUNARIA); :}
                |expresion:a  TkSimMAS  expresion:b {:RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.SUMA);:}
                |expresion:a  MENOS  expresion:b   {:RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.RESTA);:}
                |expresion:a  TkSimMULTIPLICACION expresion:b {:RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.MULTIPLICACION);:}
                |expresion:a  TkSimDIVISION   expresion:b {:RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.DIVISION);:}
                |expresion:a  TkSimMPOTENCIA   expresion:b {:RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.POTENCIA);:}
                |expresion:a  TkSimMODULO   expresion:b {:RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.MODULO);:}
                |expresion:a  TkSimMAYOR  expresion :b  {:RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.MAYORQ);:}
                |expresion:a  TkSimMENOR  expresion :b  {:RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.MENORQ);:}
                |expresion:a  TkSimMAYORIGUAL  expresion :b {:RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.MAYORIGUALQ);:}
                |expresion:a  TkSimMENORIGUAL  expresion :b {:RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.MENORIGUALQ);:}
                |expresion:a  TkSimIGUALIGUAL  expresion :b {:RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.IGUALIGUALQ);:}
                |expresion:a  TkSimDIFERENTE  expresion :b {:RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.DIFERENTEQUE);:}
                |TkSimINOT expresion:a  {:RESULT = new OperacionUnaria((Instruccion)a,TipoOperacionUnitaria.NOT);:}
                |expresion:a TkSimAND expresion:b  {:RESULT = new OperacionLogica((Instruccion)a,(Instruccion)b,TipoOperacion.AND);:}
                |expresion:a TkSimOR expresion:b     {:RESULT = new OperacionLogica((Instruccion)a,(Instruccion)b,TipoOperacion.OR);:}
                |TkSimPARENTESISAbre expresion:a TkSimPARENTESISCierra {:RESULT = a;:}
;
// entero a;
declaracionVariable::=  tipoDatoReservado:a  listaIds:b TkSimPUNTOYCOMA  {:
                                                                            RESULT = new instDeclararVariableSolaList((TipoDato)a,(LinkedList<String>)b,tablaGlobal).Interpretarr();
                                                                         :}
                            | tipoDatoReservado:a listaIds:b TkSimIGUAL expresion:c TkSimPUNTOYCOMA {:
                                                                                                    RESULT = new instDeclararVariable((TipoDato) a,(LinkedList<String>)b,(Instruccion)c ,tablaGlobal).Interpretarr();
                                                                                                     :}
;

asignacionVariable::= listaIds:a TkSimIGUAL expresion:b TkSimPUNTOYCOMA {:
                                                                          RESULT = new instAsignarVariable((LinkedList<String>)a,(Instruccion)b,tablaGlobal).Interpretarr();
                                                                         :}
;

listaIds ::=   listaIds:b  TkSimCOMA    TkJIdentificador:a
                                                                                      {:
                                                                                          LinkedList<String> result = (LinkedList<String>) b;
                                                                                          result.add(a);
                                                                                          RESULT = result;
                                                                                      :}
                |TkJIdentificador:a {:
                                               LinkedList<String> result = new LinkedList<>();
                                               result.add(a);
                                               RESULT = result;
                                   :}
;

tipoDatoReservado::= TkResENTERO {:RESULT = TipoDato.ENTERO;:}
                    | TkResDOBLE  {:RESULT =TipoDato.DECIMAL;:}
                    | TkResBINARIO  {:RESULT = TipoDato.BOOLEANO;:}
                    | TkResCARACTER {:RESULT = TipoDato.CARACTER;:}
                    | TkResCADENA  {:RESULT = TipoDato.CADENA;:}
;


instruccionSi::= TkResSI TkSimPARENTESISAbre expresion:a TkSimPARENTESISCierra TkSimLLAVEAbre lista_instruccion:b instrLlaveC
;

instrLlaveC::= TkSimLLAVECierra
                | TkSimLLAVECierra TkResSINO TkSimLLAVEAbre lista_instruccion TkSimLLAVECierra
                | TkSimLLAVECierra TkResSINO TkResSI TkSimPARENTESISAbre expresion:a TkSimPARENTESISCierra TkSimLLAVEAbre lista_instruccion instrLlaveC
;

instruccionMientras::= TkResMIENTRAS TkSimPARENTESISAbre expresion:a TkSimPARENTESISCierra TkSimLLAVEAbre lista_instruccion:b TkSimLLAVECierra
;

instruccionHacerMientras::= TkResHACER TkSimLLAVEAbre lista_instruccion:a TkSimLLAVECierra TkResMIENTRAS TkSimPARENTESISAbre expresion:b TkSimPARENTESISCierra TkSimPUNTOYCOMA
;

