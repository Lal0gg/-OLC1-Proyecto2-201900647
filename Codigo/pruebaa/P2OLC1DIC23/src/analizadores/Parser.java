
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import clases.Erroor;
import func.Funcion;
import java.util.LinkedList;
import Abstract.*;
import instrucciones.*;
import Expresiones.Primitivos.*;
import Expresiones.Aritmeticas.*;
import Expresiones.Relacional.*;
import Expresiones.Logica.*;
import Expresiones.OperacionUnaria;
import clases.TipoOperacionUnitaria;
import clases.TipoOperacion;
import clases.TipoDato;
import clases.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\003\000\002\007\007\000\002\007\003" +
    "\000\002\031\005\000\002\010\007\000\002\004\004\000" +
    "\002\004\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\011\007\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\017\005\000\002\017\007\000\002" +
    "\020\006\000\002\027\005\000\002\027\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\012\007\000\002\012\011\000" +
    "\002\013\007\000\002\014\013\000\002\034\003\000\002" +
    "\034\003\000\002\032\005\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\004\007\020\005\001\002\000\010\002" +
    "\ufffc\004\ufffc\020\ufffc\001\002\000\004\066\203\001\002" +
    "\000\010\002\ufffe\004\ufffe\020\ufffe\001\002\000\004\066" +
    "\014\001\002\000\010\002\000\004\007\020\005\001\002" +
    "\000\004\002\012\001\002\000\004\002\001\001\002\000" +
    "\010\002\uffff\004\uffff\020\uffff\001\002\000\004\035\015" +
    "\001\002\000\004\036\016\001\002\000\004\037\017\001" +
    "\002\000\034\003\043\005\036\006\055\007\021\010\037" +
    "\011\042\012\024\014\027\015\047\017\031\021\051\022" +
    "\030\066\033\001\002\000\010\002\ufffd\004\ufffd\020\ufffd" +
    "\001\002\000\004\066\uffc9\001\002\000\036\003\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7" +
    "\015\ufff7\017\ufff7\021\ufff7\022\ufff7\040\ufff7\066\ufff7\001" +
    "\002\000\036\003\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\014\ufff5\015\ufff5\017\ufff5\021\ufff5\022" +
    "\ufff5\040\ufff5\066\ufff5\001\002\000\004\035\175\001\002" +
    "\000\036\003\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\014\ufff6\015\ufff6\017\ufff6\021\ufff6\022\ufff6" +
    "\040\ufff6\066\ufff6\001\002\000\036\003\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed" +
    "\017\uffed\021\uffed\022\uffed\040\uffed\066\uffed\001\002\000" +
    "\004\035\171\001\002\000\004\055\170\001\002\000\004" +
    "\037\160\001\002\000\036\003\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\017\ufff8" +
    "\021\ufff8\022\ufff8\040\ufff8\066\ufff8\001\002\000\012\060" +
    "\uffcc\061\uffcc\075\154\076\155\001\002\000\036\003\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\014" +
    "\uffec\015\uffec\017\uffec\021\uffec\022\uffec\040\uffec\066\uffec" +
    "\001\002\000\036\003\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\017\ufff1\021\ufff1" +
    "\022\ufff1\040\ufff1\066\ufff1\001\002\000\004\066\uffcb\001" +
    "\002\000\004\066\uffc8\001\002\000\036\003\043\005\036" +
    "\006\055\007\021\010\037\011\042\012\024\014\027\015" +
    "\047\017\031\021\051\022\030\040\152\066\033\001\002" +
    "\000\036\003\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\014\uffc1\015\uffc1\017\uffc1\021\uffc1\022\uffc1" +
    "\040\uffc1\066\uffc1\001\002\000\004\066\uffc7\001\002\000" +
    "\004\055\151\001\002\000\036\003\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2\017" +
    "\uffc2\021\uffc2\022\uffc2\040\uffc2\066\uffc2\001\002\000\036" +
    "\003\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\014\ufff4\015\ufff4\017\ufff4\021\ufff4\022\ufff4\040\ufff4" +
    "\066\ufff4\001\002\000\006\060\063\061\146\001\002\000" +
    "\004\035\142\001\002\000\036\003\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\017" +
    "\ufff0\021\ufff0\022\ufff0\040\ufff0\066\ufff0\001\002\000\004" +
    "\055\141\001\002\000\036\003\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb\017\uffeb" +
    "\021\uffeb\022\uffeb\040\uffeb\066\uffeb\001\002\000\004\066" +
    "\057\001\002\000\036\003\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\017\ufff3\021" +
    "\ufff3\022\ufff3\040\ufff3\066\ufff3\001\002\000\004\066\uffca" +
    "\001\002\000\036\003\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\017\ufff2\021\ufff2" +
    "\022\ufff2\040\ufff2\066\ufff2\001\002\000\010\055\uffcc\060" +
    "\uffcc\061\uffcc\001\002\000\010\055\061\060\063\061\062" +
    "\001\002\000\036\003\uffd0\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\014\uffd0\015\uffd0\017\uffd0\021\uffd0" +
    "\022\uffd0\040\uffd0\066\uffd0\001\002\000\026\030\066\035" +
    "\074\054\071\062\073\063\070\064\067\065\075\066\065" +
    "\072\077\073\076\001\002\000\004\066\064\001\002\000" +
    "\010\055\uffcd\060\uffcd\061\uffcd\001\002\000\042\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\055\uffe2\001\002\000\026\030\066\035\074\054" +
    "\071\062\073\063\070\064\067\065\075\066\065\072\077" +
    "\073\076\001\002\000\042\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\036\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\001" +
    "\002\000\042\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\036\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\001\002\000\026" +
    "\030\066\035\074\054\071\062\073\063\070\064\067\065" +
    "\075\066\065\072\077\073\076\001\002\000\040\027\104" +
    "\030\101\031\111\032\102\033\103\034\114\044\115\045" +
    "\113\046\110\047\106\050\117\051\112\052\107\053\116" +
    "\055\136\001\002\000\042\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\036\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\001" +
    "\002\000\026\030\066\035\074\054\071\062\073\063\070" +
    "\064\067\065\075\066\065\072\077\073\076\001\002\000" +
    "\042\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\036\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\055\uffe6\001\002\000\042\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\055\uffe3\001\002\000\042\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\036\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\055" +
    "\uffe4\001\002\000\040\027\104\030\101\031\111\032\102" +
    "\033\103\034\114\036\105\044\115\045\113\046\110\047" +
    "\106\050\117\051\112\052\107\053\116\001\002\000\026" +
    "\030\066\035\074\054\071\062\073\063\070\064\067\065" +
    "\075\066\065\072\077\073\076\001\002\000\026\030\066" +
    "\035\074\054\071\062\073\063\070\064\067\065\075\066" +
    "\065\072\077\073\076\001\002\000\026\030\066\035\074" +
    "\054\071\062\073\063\070\064\067\065\075\066\065\072" +
    "\077\073\076\001\002\000\026\030\066\035\074\054\071" +
    "\062\073\063\070\064\067\065\075\066\065\072\077\073" +
    "\076\001\002\000\042\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\036\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\001\002" +
    "\000\026\030\066\035\074\054\071\062\073\063\070\064" +
    "\067\065\075\066\065\072\077\073\076\001\002\000\026" +
    "\030\066\035\074\054\071\062\073\063\070\064\067\065" +
    "\075\066\065\072\077\073\076\001\002\000\026\030\066" +
    "\035\074\054\071\062\073\063\070\064\067\065\075\066" +
    "\065\072\077\073\076\001\002\000\026\030\066\035\074" +
    "\054\071\062\073\063\070\064\067\065\075\066\065\072" +
    "\077\073\076\001\002\000\026\030\066\035\074\054\071" +
    "\062\073\063\070\064\067\065\075\066\065\072\077\073" +
    "\076\001\002\000\026\030\066\035\074\054\071\062\073" +
    "\063\070\064\067\065\075\066\065\072\077\073\076\001" +
    "\002\000\026\030\066\035\074\054\071\062\073\063\070" +
    "\064\067\065\075\066\065\072\077\073\076\001\002\000" +
    "\026\030\066\035\074\054\071\062\073\063\070\064\067" +
    "\065\075\066\065\072\077\073\076\001\002\000\026\030" +
    "\066\035\074\054\071\062\073\063\070\064\067\065\075" +
    "\066\065\072\077\073\076\001\002\000\026\030\066\035" +
    "\074\054\071\062\073\063\070\064\067\065\075\066\065" +
    "\072\077\073\076\001\002\000\042\027\104\030\101\031" +
    "\111\032\102\033\103\034\114\036\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\055" +
    "\uffda\001\002\000\042\027\104\030\101\031\111\032\102" +
    "\033\103\034\114\036\uffd3\044\115\045\113\046\110\047" +
    "\106\050\117\051\112\052\uffd3\053\uffd3\055\uffd3\001\002" +
    "\000\042\027\104\030\101\031\111\032\102\033\103\034" +
    "\114\036\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\055\uffd6\001\002\000\042\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\055\uffdb\001\002\000\042\027\104\030\101" +
    "\031\111\032\102\033\103\034\114\036\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\055\uffd5\001\002\000\042\027\104\030\101\031\111\032" +
    "\102\033\103\034\114\036\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\001" +
    "\002\000\042\027\uffde\030\uffde\031\uffde\032\uffde\033\103" +
    "\034\114\036\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\055\uffde\001\002\000\042" +
    "\027\104\030\101\031\111\032\102\033\103\034\114\036" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\055\uffd9\001\002\000\042\027\104\030" +
    "\101\031\111\032\102\033\103\034\114\036\uffd2\044\115" +
    "\045\113\046\110\047\106\050\117\051\112\052\uffd2\053" +
    "\116\055\uffd2\001\002\000\042\027\104\030\101\031\111" +
    "\032\102\033\103\034\114\036\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7" +
    "\001\002\000\042\027\uffe0\030\uffe0\031\111\032\102\033" +
    "\103\034\114\036\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0\001\002\000" +
    "\042\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\036\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\055\uffdc\001\002\000\042\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\103\034\114\036\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\055\uffdd\001\002\000\042\027\uffdf\030\uffdf\031" +
    "\111\032\102\033\103\034\114\036\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055" +
    "\uffdf\001\002\000\036\003\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\017\uffcf\021" +
    "\uffcf\022\uffcf\040\uffcf\066\uffcf\001\002\000\042\027\104" +
    "\030\101\031\111\032\102\033\103\034\114\036\uffd4\044" +
    "\115\045\113\046\110\047\106\050\117\051\112\052\uffd4" +
    "\053\uffd4\055\uffd4\001\002\000\042\027\uffe1\030\uffe1\031" +
    "\111\032\102\033\103\034\114\036\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055" +
    "\uffe1\001\002\000\036\003\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\014\uffee\015\uffee\017\uffee\021" +
    "\uffee\022\uffee\040\uffee\066\uffee\001\002\000\026\030\066" +
    "\035\074\054\071\062\073\063\070\064\067\065\075\066" +
    "\065\072\077\073\076\001\002\000\040\027\104\030\101" +
    "\031\111\032\102\033\103\034\114\036\144\044\115\045" +
    "\113\046\110\047\106\050\117\051\112\052\107\053\116" +
    "\001\002\000\004\037\017\001\002\000\036\003\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\017\uffc4\021\uffc4\022\uffc4\040\uffc4\066\uffc4\001" +
    "\002\000\026\030\066\035\074\054\071\062\073\063\070" +
    "\064\067\065\075\066\065\072\077\073\076\001\002\000" +
    "\040\027\104\030\101\031\111\032\102\033\103\034\114" +
    "\044\115\045\113\046\110\047\106\050\117\051\112\052" +
    "\107\053\116\055\150\001\002\000\036\003\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\014\uffce\015" +
    "\uffce\017\uffce\021\uffce\022\uffce\040\uffce\066\uffce\001\002" +
    "\000\036\003\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\014\uffea\015\uffea\017\uffea\021\uffea\022\uffea" +
    "\040\uffea\066\uffea\001\002\000\046\002\ufffb\003\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\040\ufffb\066\ufffb\001\002\000\036\003\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\017\ufff9\021\ufff9\022\ufff9\040\ufff9\066\ufff9\001\002" +
    "\000\004\055\157\001\002\000\004\055\156\001\002\000" +
    "\036\003\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\014\uffc0\015\uffc0\017\uffc0\021\uffc0\022\uffc0\040" +
    "\uffc0\066\uffc0\001\002\000\036\003\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\017" +
    "\uffbf\021\uffbf\022\uffbf\040\uffbf\066\uffbf\001\002\000\034" +
    "\003\043\005\036\006\055\007\021\010\037\011\042\012" +
    "\024\014\027\015\047\017\031\021\051\022\030\066\033" +
    "\001\002\000\036\003\043\005\036\006\055\007\021\010" +
    "\037\011\042\012\024\014\027\015\047\017\031\021\051" +
    "\022\030\040\162\066\033\001\002\000\004\015\163\001" +
    "\002\000\004\035\164\001\002\000\026\030\066\035\074" +
    "\054\071\062\073\063\070\064\067\065\075\066\065\072" +
    "\077\073\076\001\002\000\040\027\104\030\101\031\111" +
    "\032\102\033\103\034\114\036\166\044\115\045\113\046" +
    "\110\047\106\050\117\051\112\052\107\053\116\001\002" +
    "\000\004\055\167\001\002\000\036\003\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3" +
    "\017\uffc3\021\uffc3\022\uffc3\040\uffc3\066\uffc3\001\002\000" +
    "\036\003\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\014\uffef\015\uffef\017\uffef\021\uffef\022\uffef\040" +
    "\uffef\066\uffef\001\002\000\026\030\066\035\074\054\071" +
    "\062\073\063\070\064\067\065\075\066\065\072\077\073" +
    "\076\001\002\000\040\027\104\030\101\031\111\032\102" +
    "\033\103\034\114\036\173\044\115\045\113\046\110\047" +
    "\106\050\117\051\112\052\107\053\116\001\002\000\004" +
    "\055\174\001\002\000\036\003\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\017\uffe9" +
    "\021\uffe9\022\uffe9\040\uffe9\066\uffe9\001\002\000\026\030" +
    "\066\035\074\054\071\062\073\063\070\064\067\065\075" +
    "\066\065\072\077\073\076\001\002\000\040\027\104\030" +
    "\101\031\111\032\102\033\103\034\114\036\177\044\115" +
    "\045\113\046\110\047\106\050\117\051\112\052\107\053" +
    "\116\001\002\000\004\037\017\001\002\000\040\003\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\201\014\uffc6\015\uffc6\017\uffc6\021\uffc6\022\uffc6\040\uffc6" +
    "\066\uffc6\001\002\000\004\037\017\001\002\000\036\003" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\014\uffc5\015\uffc5\017\uffc5\021\uffc5\022\uffc5\040\uffc5\066" +
    "\uffc5\001\002\000\004\035\204\001\002\000\004\036\205" +
    "\001\002\000\004\055\206\001\002\000\010\002\ufffa\004" +
    "\ufffa\020\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\012\002\010\005\007\007\005\010\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\012\010\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\017\001\001\000" +
    "\044\003\031\004\037\011\021\012\024\013\022\014\044" +
    "\015\053\016\055\017\034\020\047\021\025\025\052\027" +
    "\045\032\043\033\040\034\033\036\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\152\011\021\012\024\013\022\014\044\015\053\016\055" +
    "\017\034\020\047\021\025\025\052\027\045\032\043\033" +
    "\040\034\033\036\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\134\001\001\000\004\022\133\001" +
    "\001\000\004\022\132\001\001\000\004\022\131\001\001" +
    "\000\002\001\001\000\004\022\130\001\001\000\004\022" +
    "\127\001\001\000\004\022\126\001\001\000\004\022\125" +
    "\001\001\000\004\022\124\001\001\000\004\022\123\001" +
    "\001\000\004\022\122\001\001\000\004\022\121\001\001" +
    "\000\004\022\120\001\001\000\004\022\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\142\001\001\000" +
    "\002\001\001\000\004\031\144\001\001\000\002\001\001" +
    "\000\004\022\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\031\004\160\011\021\012\024" +
    "\013\022\014\044\015\053\016\055\017\034\020\047\021" +
    "\025\025\052\027\045\032\043\033\040\034\033\036\051" +
    "\001\001\000\042\003\152\011\021\012\024\013\022\014" +
    "\044\015\053\016\055\017\034\020\047\021\025\025\052" +
    "\027\045\032\043\033\040\034\033\036\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\175\001" +
    "\001\000\002\001\001\000\004\031\177\001\001\000\002" +
    "\001\001\000\004\031\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public void syntax_error(Symbol s) {
    if (s.value != null) {
        Erroor errorsito = new Erroor("Sintactico", s.value.toString(), "No es valido en este lenguaje sintact", s.right, s.left);
        Funcion.ErrorList.add(errorsito);
        System.err.println("Error Sintactico: " + s.value.toString() + "  Fila: " + s.right + "  Columna: " + s.left + ". Recuperado");
    } else {
        // Handle the case where s.value is null (customize this part based on your needs)
        System.err.println("Error Sintactico: Token sin valor asignado  Fila: " + s.right + "  Columna: " + s.left + ". Recuperado");
    }

}

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    if (s.value != null) {
        Erroor errorsito = new Erroor("Sintactico", s.value.toString(), "No es valido en este lenguaje sintact", s.right, s.left);
        Funcion.ErrorList.add(errorsito);
        System.err.println("Error Sintactico: " + s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado");
    } else {
        // Handle the case where s.value is null (customize this part based on your needs)
        System.err.println("Error Sintactico: Token sin valor asignado - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado");
    }
}




     


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= lista_metodos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_metodos ::= lista_metodos metodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_metodos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_metodos ::= metodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_metodos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // metodo ::= TkResVOID TkJIdentificador TkSimPARENTESISAbre TkSimPARENTESISCierra BloqueSentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // metodo ::= ejecucion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BloqueSentencias ::= TkSimLLAVEAbre lista_instruccion TkSimLLAVECierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new BloqueSent((ArrayList<Instruccion>) a).Interpretarr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ejecucion ::= TkResEJECUTAR TkJIdentificador TkSimPARENTESISAbre TkSimPARENTESISCierra TkSimPUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecucion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_instruccion ::= lista_instruccion instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                            ((ArrayList<Instruccion>) a).add((Instruccion) b);
                                                             RESULT = a;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_instruccion ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        ArrayList<Instruccion> nuevaLista = new ArrayList<>();
                                            nuevaLista.add((Instruccion) a);
                                            RESULT = nuevaLista;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= instruccionImprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= instruccionSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= instruccionMientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= instruccionHacerMientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= instruccionPara 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= instruccionSelectorCaso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= declaracionVariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= asignacionVariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= TkResCONTINUAR TkSimPUNTOYCOMA 
            {
              Object RESULT =null;
		RESULT= new CONTINUAR();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= TkResCORTAR TkSimPUNTOYCOMA 
            {
              Object RESULT =null;
		RESULT= new CORTAR();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= instruccionCasteo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= instDecreIncre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= instrOperadorTernario 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= error TkSimPUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccionImprimir ::= TkResIMPRIMIR TkSimPARENTESISAbre expresion TkSimPARENTESISCierra TkSimPUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                                                    RESULT = new instIMPRIMIR((Instruccion)a).Interpretarr();
                                                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionImprimir",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= TkJENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DataPrimitiva(a,TipoDato.ENTERO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= TkJDECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DataPrimitiva(a,TipoDato.DECIMAL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= TkJErChar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DataPrimitiva(a,TipoDato.CARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= TkJCADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DataPrimitiva(a,TipoDato.CADENA);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= TkResTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DataPrimitiva(a,TipoDato.BOOLEANO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= TkResFALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DataPrimitiva(a,TipoDato.BOOLEANO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= TkJIdentificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expIDENTIFICADOR(a,Funcion.tablaGlobal);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= MENOS expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperacionUnaria((Instruccion)b,TipoOperacionUnitaria.RESTAUNARIA); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion TkSimMAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.SUMA);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.RESTA);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion TkSimMULTIPLICACION expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.MULTIPLICACION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion TkSimDIVISION expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.DIVISION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion TkSimMPOTENCIA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.POTENCIA);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion TkSimMODULO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionesAritmeticas((Instruccion)a,(Instruccion)b,TipoOperacion.MODULO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion TkSimMAYOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.MAYORQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion TkSimMENOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.MENORQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion TkSimMAYORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.MAYORIGUALQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion TkSimMENORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.MENORIGUALQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion TkSimIGUALIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.IGUALIGUALQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion TkSimDIFERENTE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionRelacional((Instruccion)a,(Instruccion)b,TipoOperacion.DIFERENTEQUE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= TkSimINOT expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionUnaria((Instruccion)a,TipoOperacionUnitaria.NOT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion TkSimAND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionLogica((Instruccion)a,(Instruccion)b,TipoOperacion.AND);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion TkSimOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OperacionLogica((Instruccion)a,(Instruccion)b,TipoOperacion.OR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= TkSimPARENTESISAbre expresion TkSimPARENTESISCierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracionVariable ::= tipoDatoReservado listaIds TkSimPUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                            RESULT = new instDeclararVariableSolaList((TipoDato)a,(LinkedList<String>)b,Funcion.tablaGlobal);
                                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracionVariable ::= tipoDatoReservado listaIds TkSimIGUAL expresion TkSimPUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                                    RESULT = new instDeclararVariable((TipoDato) a,(LinkedList<String>)b,(Instruccion)c ,Funcion.tablaGlobal);
                                                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacionVariable ::= listaIds TkSimIGUAL expresion TkSimPUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                          RESULT = new instAsignarVariable((LinkedList<String>)a,(Instruccion)b,Funcion.tablaGlobal);
                                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVariable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listaIds ::= listaIds TkSimCOMA TkJIdentificador 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                          LinkedList<String> result = (LinkedList<String>) b;
                                                                                          result.add(a);
                                                                                          RESULT = result;
                                                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaIds",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listaIds ::= TkJIdentificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                               LinkedList<String> result = new LinkedList<>();
                                               result.add(a);
                                               RESULT = result;
                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaIds",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoDatoReservado ::= TkResENTERO 
            {
              Object RESULT =null;
		RESULT = TipoDato.ENTERO;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDatoReservado",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipoDatoReservado ::= TkResDOBLE 
            {
              Object RESULT =null;
		RESULT =TipoDato.DECIMAL;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDatoReservado",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoDatoReservado ::= TkResBINARIO 
            {
              Object RESULT =null;
		RESULT = TipoDato.BOOLEANO;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDatoReservado",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipoDatoReservado ::= TkResCARACTER 
            {
              Object RESULT =null;
		RESULT = TipoDato.CARACTER;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDatoReservado",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipoDatoReservado ::= TkResCADENA 
            {
              Object RESULT =null;
		RESULT = TipoDato.CADENA;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDatoReservado",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccionSi ::= TkResSI TkSimPARENTESISAbre expresion TkSimPARENTESISCierra BloqueSentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                                     RESULT = new instSI((Instruccion)a, (Instruccion)b).Interpretarr();
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSi",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccionSi ::= TkResSI TkSimPARENTESISAbre expresion TkSimPARENTESISCierra BloqueSentencias TkResSINO BloqueSentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                                     RESULT = new instSI((Instruccion)a, (Instruccion)b, (Instruccion)c).Interpretarr();
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSi",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruccionMientras ::= TkResMIENTRAS TkSimPARENTESISAbre expresion TkSimPARENTESISCierra BloqueSentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                                     RESULT = new instMientras((Instruccion)a, (Instruccion)b).Interpretarr();
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionMientras",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruccionHacerMientras ::= TkResHACER TkSimLLAVEAbre lista_instruccion TkSimLLAVECierra TkResMIENTRAS TkSimPARENTESISAbre expresion TkSimPARENTESISCierra TkSimPUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                                     RESULT = new instHacerMientras((Instruccion)a, (Instruccion)b).Interpretarr();
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionHacerMientras",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instDecreIncre ::= instDecremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instDecreIncre",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instDecreIncre ::= instIncremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instDecreIncre",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instDecremento ::= TkJIdentificador TkSimDECREMENTO TkSimPUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                                     RESULT = new instDecremento((String)a,Funcion.tablaGlobal).Interpretarr();
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instDecremento",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instIncremento ::= TkJIdentificador TkSimINCREMENTO TkSimPUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                                     RESULT = new instIncremento((String)a,Funcion.tablaGlobal).Interpretarr();
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instIncremento",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
